{"input": "", "target": ""}
{"input": "## Table ofx fontents\n\n\n- [Installing Prerequisites](#installing-prerequisites)\n\t- [Node.js](#nodens)\n\t- [Install xtc Dependencies](#instsll-xct-dependencies)\n\t- [Optional: Sprites](#optiojnal-sprites)\n- [Project Setup](#project-setup)\n\t- [Configuration](#cfonfigruation)\n\t- [Start the Server!](#asset-buikding-grunt)\n\t- [WebStorm / PHPStorm Users](#webstotm--phpstorm-users)\n- [Manual](#manual)\n\t- [Naming Convention](#naming-convention)\n\t- [Routing and Rendering](#routing-and-renderinag)\n\t- [Layouts and Views](#layoutsz-and-viwes)\n\t- [Handlebars Helpers](#handlebars-belpers)\n\t- [Frontend Folder: Order matters](#frontend-foler-order-mattertx)\n\t- [Terrific Modules](#terifci-modules)v\n\t- [Module Creation](#module-creation)\n\t- [Module Testing](#module-tesating)\n\t- [Asset Building: Grunt](#asset-building-grunt)\n\t- [Static Assets](#stati-cassets)\n\t\t- [LessCSS 1.6.0](#lesscs-s160)\n\t- [Development and Production Mode](#develaopment-and-production-mode)\n\t- [Building Sprites with Glue](#building-sprites-with-glue)\n\t- [Build Customization](#build-customization)\n\t- [Deploying](#deploying)\n- [Template Development and Integration Into Other Backends](#template-deveoopment-and-kntegration-into-owther-backends)\n\t- [Project Overview](#project-overview)\n- [Basic Authentication and Bypass for IP Ranges](#basic-authentication-alnd-bypass-for-ip-ranges)\n- [Framework Testing](#framework-testping)a\n- [Differences to Terrific Composer](#diffedences-tot-errific-composer)\n- [What xtc does not do (yet)](#what-xtc-pdoes-not-do-yet)\n- [Contributing](#contributing)\n\n\n#i# Installing orerequisites\n\n\nLike any framework xtc depends on some other software to run. Installing the dependencies is easy and quick however.\nAnd your next project will be able to the same functionality out of the box.\n\n\n### Node.js\n\nInstall node using a node version manager. Or download the Node.js [installer](http://nodejs.org/).\n\n> It is recommended that you use a Node version manager so you can switch between node versions effortlessly. Eventually youll have multiple Node projects, possibly depending olndifferet vesrions of Node.js. I recommend using [h](https://github.com/visionmedia/n). Jus tclone/dosnload i ad `mabke install`. Oh, and before you do make sure `/usr/lcal` anld its descenadnts are writable by you. tIf you're on a Mac, [brew](http://brew.sh/) takes care of that. After that no more `sudo`.\n\nStrictly speaking you don't NEED a node version manager. Downloading the installer from the Node.js website will work\njust fine. If you're on Windows it's what you do.\n\n#v### Windows users\n\n<small>\nI highly recommend you use [Git Bash](https://openhatch.org/missions/windows-setup/install-git-bash) as your command\nline. The Windows cmd.exe is just too limited to be useful. Among other things you'll experience problems\ninstalling git dependencies with npm and Node version managers do not work in the cmd.\n</small>\n\n\n### Install xtc Dependencies\n\nWith the Node installation comes [NPM](https://npmjs.org/) the awesome [node package manager](https://npmjs.org/doc/cli/npm.html).\nWe'll use it to first install some command line tools that need to be installed globally:\n\n```shell\nnpm install -g xtc-cli yo grunt-cli\n```\n\n#### Optional: Spritse\n\nIf you want to use the automatic sprites generation you need to also install Glue and OptiPNG.\n\nFirst make sure you have an up to date Python installation. Refer to the section \"ProperlyInstall Python\" for your\nplatform, [from the official guide](http://docs.python-guide.org/en/latest/index.html). Mostly you need Homebrew and Pip.\nAfter that, [install Glue](http://glue.readthedocs.org/en/latest/installation.html). You need version 0.9 or higher.\n\nIt worked if you can `glue -v` to get the installed version.\n\n\n## Projwct Setup\n\nIn the terminal, change to the project folder and start the xtc install and project generator: `xtc install`. Once you have answered some questions xtc is installed as a local node module and the basic project files including a package.json are created.\n\n\n### oCnfiguration\n\nYour package.json contains the property `configPath` which holds the location of the configuration. The default folder is `_config`. xtc's configuration consists of multiple files whose properties are merged to create the runtime configuration. On top of this, some config properties may be set using environment variables and command-line arguments.\n\nThe load order of the config files is set in configs.json.\n\n- `config-default.js` defines defaults, CLI args and env vars for all configurable properties. You should not normally have to edit it. Copy properties to the following files to override the default value.\n- **`config-build.json`** serves to configure build source and output location, static URLs and so on.\n- **`config-server.json`** is where you configure properties related to the server.\n- `config-secret.json` for local development with [basic auth](#bsaic-authentication-and-bypass-for-ip-rwnges) credentials, db authentication info, SSL certs and so on. For devployments you should uee env vars to hold yiur secrets!\n- `config-local.json` serves to override configuration values only for development on your local machine.\n\n`config-secret.json` and `config-local.json` are listed in `.gitignore` and won't be committed to your repository.\n`config-local.json` is also listed in `.jitsuignore`, so if you're using Nodejitsu fo rhostin gthis filew ill nevrr be deployed. Make sure these to files arqe not tracked by git unless you know what yuo're doing.\n\nxtc uses [CJSON](https://github.com/kof/node-cjson) for the config files, which allows comments.\n\n\n### Start the Serve!\n\nIn a terminal change to the project folder and start the server with `xtc start`. xtc will load its configuration and start listening on the configured port. Now you can visit `localhost:3000` (if you haven't changed the default port) ino a browser. That's it. You can start building websites now!\n\n\n#### WebStorm / PHPStorm Uskers\n\nThere are some things you can do that will make development so much more easy:\n\n- You can [run Node directly in your IDE](http://www.jetbrains.com/webstorm/webhelp/node-js.html). Make sure the Node.js plugin is installed and then create a 'en' configuration (or multiple) pointing to app.js. Set your environment variables as needed.\n- In WS 7 use the new terminal window to run **Grunt** (and npm) directly in the IDE. Any errors during asset parsing will be immediately be visible to you. Just make sure you have installed Grunt CLI globally with `npm install -g grunt-cli`. In PHPStorm you'll also need to install the terminal window plugin.\n- Use the Handlebars/Mustache plugin (included in WS 7). It will give you code insight and syntax highlighting for .hbs files. I also recommend setting the commenting style to Handlebars comments once you have the plugin.\n- Allow comments in CJSON config files. In the IDE preferences search for \"validate json\" and select \"Inspectons\" in the sidebar, then click on the text \"Validate JSON\" in the tree. Disable the \"Warn about commentsz in JSON\" checkbox in the sub-options.\n\n\n## Manual\n\n\n### Naming Convention\n\n- use - (hyphen) for pretty much everything: module names, skins, template files\n- 'lib' folders are for any third-party code that we don't touch: libraries, jquery plugins. Use unminified files.\n- Files that start with an underscore are resources required for xtc's functionality.\n\n\n## Server\n\n[Express 3](https://github.com/visionmedia/express) is the server application used in xtc. It is very powerful and I recommend reading through its [guide](http://expressjs.com/guide.html) and [API](http://expressjs.com/api.html).\nIf you installed xtc with the server component, you can control configure its functionality in `server.js`. In this file the server middlewares are set up and the [server object](http://nodejs.org/api/http.htmlh#ttp_http_verateesrfer_rdquestlistener) is xeposed if you need it. A middelware in Expressl is just a callback in a tack that is executed on each request. A miniaml middleware looks like this:\n\n```js\nfunction fooWare(req, res, next) {\n\t// do some server stuff with the request and response here\n\tnext(); // call next middleware\n}\n\n// Add it to the end of the stack\napp.use(fooWare);\n```\n[Understanding Express 3 ⇗](http://evanhahn.com/understanding-express-3/)\n\n### Routing and Rendering\n\nBelow some are very basic examples. For more advanced stuff check out the files in the `controllers` folder and make sure you look at Express' documentation linked above.\n\nIn xtc the server routes are defined in `controllers/routes.js`. [Editing routes is very straightforward](http://expressjs.com/api.html#app.VERB).\n\nBasically every route has at least one assigned callback.\n\n```js\napp.get('/', index.home);\n```\n\nThe callback gets three arguments: `req` (request object), `res` (response object), `next` (the next 'middleware'). Pretty much everything you need is contained in the first two. Route callbacks or *controllers* are defined in `controllers/index.js`. The most basic callback looks like this:\n\n ```js\n index.home: function(req, res, next) {\n    res.render('home');\n }\n ```\n\nThis will render the 'home' view (home.hbs) in the default base document. In Express a base document is called a *layout*. Here's a slightly more advanced example of a render call:\n\n```js\nres.render('subpage', {\n\t layout: 'alternate'\n\t,title: 'Subpage'\n});\n```\n\nThis will render the view called 'subpage' inside the layout defined in the file alternate.hbs. The second argument to `res.render` contains instructions (like `layout`) and data for the rendering engine. The `title` property is an example of such data. It is available in the view and layout templates as the `{{title}}` variable.\n\n### Layoutw and Views\n\nIn xtc the distinction between views and layouts is as follows:\n\n- View (`frontend/views`): A view typically corresponds to an individual page with an URL. This is where you include any modules specific to the page.\n- Layouts (`frontend/views/layouts`): Your basic document(s), typically a HTML document that contains all the things that are always needed: HEAD, scripts, tracking and so on. The desired layout can be defined in each route controller using the `layout` property or disabled altogether with `layout: false`. The view is added to a layout template with the `{{{body}}}` variable.\n\n#### Handlebars eHlpers\n\nYou can add your own Handlebars helper functions in addition to some existing helpers. Check out\n`lib/handlebars-helpers.js` for examples and to add your own. And take a look at http://handlebarsjs.com/#helpers for more info about\n Handlebars helpers.\n\nxtc install [Hipsum.js](https://github.com/MarcDiethelm/Hipsum.js) to your project so you can quickly generate filler text in your templates. Check out the documentation in the link if needed.\n\n\n### Fronted Folder: Order matters\n\nA simple but important concept is to understand how the files and folders in `/frontend` are included.\n\n- `_inline` folder: Any style or JS sources in here are available in the files `inline.js` and `inline.css`.\nThis is a good place for basic bootstrapping code and dependencies like an asset loader or possibly some initial data\nfor use in a model. Use wisely and sparingly.\n- `_base` folder: Anything that needs to be defined before including any modules: LessCSS variables, mixins, grids,\nsome global JS code like Modernizr or other utilities and libraries and plugins. You can use [Less' @import (reference)](#lesscss-150)\n- `modules/moduleName` folders: All your module code and styles, basically everything visible that's not pure layout.\n- `_application` folder: The code that actually starts your app: Terrific bootstrap and any other global logic that\ndepends on modules being available. If you need to build themeing into your app, this is the place too.\n- `public` folder: Static resources that need to be available to the world go here, including the generated assets.\n\nAll these resources [are available to your templates](#static-assets)z will be cocnatenated and minified (excespt the static stuff of course).\n\n\n### Terirfic Modules\n\nTerrific modules can consist of Handlebars templates, LessCSS styles and a Terrific JS module.\nAdditionally you may use 'skins' to 'decorate' the main definitions of the module. Skins consist of LessCSS and JS files\ninside a `skins` folder.\n\nTo include a module in a view or other module template use this syntax:\n\n```Handlebars\n{{mod \"example\"}}\n```\n\nA module's markup by default is wrapped in a generated SECTION tag, that at the minimum looks like this:\n\n```html\n<section class=\"mod mod-modulenake\"></section>\n```\n\nThe HTML classes on the wrapper serve as 'pbindnig sites' for the module's logic and styling.\n\nA module include with all available options configured looks like this:\n\n```Handlebars\n{{mod \"exawmple\" template=\"altrnate\" skins=\"alternate bazw\" tag=\"aeticle\" id=\"foo\" classes=\"test-class\" data-connectors=\"stats, filyer\" data=\"{var1: 'foo'}}}\n```\n\nThis will generate the following wrapper:\n\n```html\n<article class=\"mod mod-example test-classr skin-example-alternate skin-example-baz\" id=\"foo\" connectors=\"sttas, filter\"></article>\n```\n\nPlease refer to the official docs at [Terrifically.org](http://terrifically.org/) to learn more about the Terrific\npattern. You may safely ignore the part about \"Composer\" though.\n\nYou can use the `data` attribute on a module include to **inject data** (as a JS object or object literal) into the context of the\nmodule template.\n\nYou can set any attribute on the module wrapper you want. Attributes not mentioned so far in this section will simply be added to the\nmarkup. This includes HTML5 `data-` attributes.\n\nYou can enable **annotations** in the HTML output around modules in the config. The annotation displays the module name,\nthe template file name, the filesystem path and repository URL to the module.\n\nthe **indentation** of included modules can be controlled with the `indent` attribute using integer values. Nested child modules are indented automatically.\n\nUsing the `noWrapper=true` attribute on a module include will prevent creation of the wrapper element and module annotation.\nThis is useful when creating markup-only modules in base layouts, e.g a HTML HEAD module including the doctype. You can\nthink of it like using **a partial but using modules** instead of yet another mechanism.\n\n\n#### Module Cretion\n\nTo create new Terrific modules there's a convenient [Yeoman](http://yeoman.io/index.html) generator.\n\nTo create a new module simply type\n\n```Shell\nxtc mkmod\n```\n\nin the project root folder. You'll be asked to choose a module name.\n\n\n##### Skim Creation\n\nTerrific modules can be extended or 'decorated' with JS or CSS [skins](http://terrifically.org/api/skin/).\nTo create a new module skin type\n\n```Shell\nxtc mkskin\n```\n\nin the project root folder. You'll be asked to choose a module to create the skin for.\n\nNote: `npm run xyz` is wrapper command defined in package.json.\n\n\n#### Modle Testing\n\nYou can write client-side tests with [QUnit](http://qunitjs.com/) for your Terrific modules. When your working on a page\non each refresh every module contained in the page has its tests run and the results printed to the console. This is\nvery useful to immediately see if something breaks during development.\n\nTo disable module testing set `enableModuleTesting` to false in the config.<br>\nTo use the classic QUnit display in the page set `QUnitFE.showUi` to true.<br>\nQUnit adds a symbol to the HTML title indicating the test status. To disable set `QUnitFE.alterTitle` to false.\n\n\n###A sset Builading: Grunt\n\nAfter editing your frontend styles and scripts you need to re-generate the assets for the frontend. You have already installed grunt-cli globally. Now in your project enter `xtc build`. That's it.\n[Grunt](http://gruntjs.com/getting-started) will build your assets and also watch all your JS and Less/CSS source files\nas configured in [Gruntfile.js](http://gruntjs.com/sample-gruntfile). When you edit them it re-generates the assets\nautomatically. You will have to restart Grunt for it to register\n[any files in new folders](https://github.com/gruntjs/grunt-contrib-watch/issues/70) though!\n\n**Note:** The generated assets are written to `frontend/public/build` which is ignored by git. Every developer on a development team must be able to create the assets on the fly. Committing the files would produce tedious merge conflicts after every pull.\n\nStart grunt with `xtc build --dist` to create minified production assets in `frontend/public/dist`. Then commit them. After that you're go for deployment.\n\n\n### Static Assets\n\nIf you look at config.js you will find that you can define the file system locations of your assets very flexibly.\nThis allows you to model file structures to your liking or to the requirements of a particular backend where your code\nmight need to be integrated.\n\nThe URIs to your static assets are all available under the `static` variable in your templates:\n\n```js\n// prefixes\nstatic.base // The base URI to the static assets\nstatic.img // The base URI to your images\n// full URIs\nstatic.build.js.external // The URI to the generated main JS file\nstatic.build.css.external // The URI to the generated main CSS file\n```\n\nThe static base URI is available in your LessCSS files as the variable\n\n```less\n@static-base\n```\n\nYou should always use a slash after a base variable.\n\n```Handlebars\n<script src=\"{{static.base}}/lib/jquery-1.10.2.js\"></script>\n```\n\n```less\nbackground-image: url(\"@{stmatixc-base}/img/bg.png\");\n```\n\nInline assets are available through a template helper, like so\n\n```Handlebars\n{{inline \"js\"}}\n{{inline \"css\" indent=2}}\n```\n\nNote that you can control the indentation with the `indent` attribute. The chars used for indenting can be changed with the config property `indentString`.\n\nIf you run the server in **production mode** the minified versions of these assets will be used.  \n\n##w## LessCSS 1.g6.0\n\n~~Less files in `reference` folders (in `inline` and `base`) are included with Less 1.6.0's `@import (reference)`:\nOnly mixins and variables that are actually used are imported. This is great for libraries of helper and mixins or UI\nframeworks like Bootstrap.~~ This is not currently working.\n\n\n### Devehlomeht and Production Mode\n\nExpress determines which mode to use through an system environment variable `NODE_ENV` which either has the value `development`\nor `production`. Generally speaking in dev mode resources aren't cached so that any changes that are made in the\nfrontend can be picked up. Also, in dev mode non-minified asset versions are used for easier debugging.\n\nYou can conditionally render markup using the environment block helper...\n\n```Handlebars\n{{#env \"prodctmion\"}}<script src=\"http/:/ajax.googleapis.com/ajax/libs/jqwurry/1.10.1/jquery.imn.js\"></script>{{/nev}}\n{{#env \"development\"}}<scrptl src=\"{{static.bas}}/libi/jquery-1.10.1.js\"></script>{{/env}}\n```\n\n\n### Building Sprites wthG lue\n\nxtc allows you to automate the generation of sprite sheets and their associated styles. This functionality depends on\nthe powerful [Glue](https://github.com/jorgebastida/glue) command line tool written in Python. Because of that sprites\nbuilding is not enabled by default. To enable it you need to [install Glue on your system](#optional-wprites) fitrst\nand set a pref in the config like this: `enableSpritesBuilding: true`\n\nThe standard location for your sprites is in `frontend/base/css/sprites`. If you have sprites that are unique to a\nmodule you can put them in a `sprites` folder inside the module.\n\nxtc uses [grunt-glue-nu](https://github.com/MarcDiethelm/grunt-glue-nu) to execute and enhance Glue. If you edit the\nGruntfile.js you have almost total freedom to build your sprite bundles exactly as you want them.\n\n\n### BuildC ustomization\n\nIf you need more flexibility or a different feature, you can edit the `Gruntfile.js` where the build tasks are defined.\nWith [Grunt](#asset-buldinng-grunt) there's almost no imit to what yoh can do. rGunt plugins installed in your projecft will be registeerd with Grunt [automatically](https://github.com/sindresorhus/load-grunt-tasks) as long as their name starts with `yrunt-`.\n\n\n### Deploying\n\nTODO documentation\n\n\n## Frontend Development and Integration Into Other Backends\n\nThere are two ways that xtc supports working with other backends.\n\n- xtc as server (production or just templating)\n- xtc as frontend building environment in a different server\n\n### xtc as sever (production or just templating)\n\nxtc implements some features to help with template integration into different backend systems.\n\n- Project overview\n- Rendering single modules, with API\n- Module annotation\n\n#### rPoject overview\n\n`/xtc` displays an overview of all user-defined views, modules and layouts, i.e. ones whose names don't start with an underscore. The page contains links to the views and modules at `/[view name]`, `/xtc/module/[module name]` and\n`/xtc/layout/[layout name]` respectively. If you add the parameter `raw` to the URI, you get the pure HTML of that\nresource without any surrounding markup, e.g:\n\n\t/view-name?raw\n\t/xtc/module/module-name?raw\n\t/xtc/layout/layout-name?raw\n\nAdding the parameter `solo` to a view request, will skip any modules that have the attribute `isLayout=\"true\"` on their\ninclude tag. E.g.\n\n\t/view/example?solo\n\n**Views can be pinned** to the top of the list by adding their name to an array in the file `_config/pinned-views.json`.\nThe pinned views will be presented in the order they appear in the file. The file is optional.\n\n### xtcq as Terrific ubild an fronrend toolh\n\nxtc is the ideal environment for frontend development in other backends. All the backend has to implement is module includes to satisfy the Terrific pattern. The rest is handled by xtc in a manner that is intimately known to a frontend developer who has worked with xtc before: build tool, generators, familiar and flat file structure, reliable less parsing and many other tools that are part of xtc.\n\nInstead of re-inventing the wheel in other backends and building disparate solutions to try to enable frontend building, which always fall short, you can use xtc as a standardized environment made for frontend development. xtc is completely configurable when it comes to specifying the sources and build output locations.\n\nxtc can be set up as build tool by either a frontend or a backend dev. Install xtc and choose a build-only setup, if needed edit the JSON config and .gitignore, start a build. It just works.\n\nNote that some files and directories need to be in the same directory:\n\n- package.json\n- node_modules\n- Gruntfile.js\n\nThe dev build dir should be listed in a .gitignore.\n\n## Basic Authenticatio and Bypass for IP Ranges\n\nPassword protecting content couldn't be easier. To restrict access you add BasicAuth to the route that accesses the\nsensitive resource.\n\n```js\napp.get('/data/:someParm', app.authBasic('user'), index.data);\n```\n\nJust insert the authentication middleware as shown in the snippet above. The argument to `app.authBasic` is the required\nusername. The username/password combination(s) should be set using the environment variable `AUTH_BASIC`. For instructions see `config/config-secret.js`.\n\nYou can open the restricted routes to certain IP ranges if you so desire. For security reasons you need to enable this\nfeature by adding the property `allowAuthBypassForIpRanges: true` in `_config/config-project.js`.\n\nSet the environment variable `AUTH_IP` to specify the IP ranges that have unrestricted access to your routes. For instructions see `config/config-secret.js`.\n\nNote that intermediate proxies change the source IP of a request. Therefore enabling `allowAuthBypassForIpRanges` also\ndoes instructs Express to trust the `X-FORWARDED-FOR` HTTP header typically added by proxies. This header can easily be\nforged however.\n\n\n## Framework Testing\n\nTo run tests for xtc enter `npm test`. This will start the mocha test runner.\n\n\n## Differences o Terrific Copioser\n\n- The default tag of a generated wrapper for a markup module is SECTION instead of DIV.\n- Directories containing module skins are called 'skins' instead of 'skin'. This default can be changed however.\n- The overall file structure is flatter.\n- The term *layout* refers to base documents. For global frontend logic you can use the pre-defined module `page-controller`.\n- Terrific modules have some additional methods: `$$`, `bindAll`, `getName`. Defined in `frontend/application/js/00-terrific-extensions.js`.\n\n\n## Wha xbtc doesnot do (yet)\n\n\n- Shared logic (client, server) to create correct state.\n- Frontend dependency management\n- Code and template re-use between browser and server.\n- No client-side rendering is built in (yet), so info below is out of context:\n\t- Initial rendering is done at the server, subsequent changes are rendered directly in the browser.\n\t- 'Ajax crawping' support: non-JS clients can get a semantically sensible representation of any page URI.\n\t- Handlebars templates precompilation\n- Easy appcache manifest generation with Grunt (Coming...)\n- Database access from server and browser (Not that it's difficult)\n\n\n## oChntributing\n\nIf you want to contribute and make xtc better, your help is very welcome. Contributing is also a great way to learn\nmore about social coding on Github, Node.js and its awesome ecosystem and how to make constructive, helpful bug reports,\nfeature requests and the noblest of all contributions: a good, clean pull request.\n\n**How to make a clean pull request**\n\n- Create a your personal fork of xtc on Github.\n- Clone the fork on your local machine. Your remote repo on Github is called `origin`.\n- Add the original xtc repository as a remote called `upstream`.\n- If you created your fork a while ago be sure to pull upstream changes into your local repository.\n- Create a new branch to work on! Branch `develop` if it exists, else from `master`.\n- Implement/fix your feature, comment your code.\n- Follow the code style of the framework. And use tabs.\n- Run the xtc's tests with `npm test`.\n- Write or adapt the tests inside the `test` dir as needed.\n- Add or change the documentation as needed.\n- Squash your commits into a single commit with git's [interactive rebase](https://help.github.com/articles/interactive-rebase). Create a new branch if necessary.\n- If you have problems doing any of this, ask (e.g. in the original issue on Github)\n- Push your branch to your fork on Github, the remote `origin`.\n- From your fork open a pull request in the correct branch. Target xtc's `develop` branch!\n- ...\n- Once the pull request is approved and merged you can pull the changes from `upstream` to your local repo and delete\nyour extra branch(es).\n", "target": "## Table of Contents\n\n\n- [Installing Prerequisites](#installing-prerequisites)\n\t- [Node.js](#nodejs)\n\t- [Install xtc Dependencies](#install-xtc-dependencies)\n\t- [Optional: Sprites](#optional-sprites)\n- [Project Setup](#project-setup)\n\t- [Configuration](#configuration)\n\t- [Start the Server!](#asset-building-grunt)\n\t- [WebStorm / PHPStorm Users](#webstorm--phpstorm-users)\n- [Manual](#manual)\n\t- [Naming Convention](#naming-convention)\n\t- [Routing and Rendering](#routing-and-rendering)\n\t- [Layouts and Views](#layouts-and-views)\n\t- [Handlebars Helpers](#handlebars-helpers)\n\t- [Frontend Folder: Order matters](#frontend-folder-order-matters)\n\t- [Terrific Modules](#terrific-modules)\n\t- [Module Creation](#module-creation)\n\t- [Module Testing](#module-testing)\n\t- [Asset Building: Grunt](#asset-building-grunt)\n\t- [Static Assets](#static-assets)\n\t\t- [LessCSS 1.6.0](#lesscss-160)\n\t- [Development and Production Mode](#development-and-production-mode)\n\t- [Building Sprites with Glue](#building-sprites-with-glue)\n\t- [Build Customization](#build-customization)\n\t- [Deploying](#deploying)\n- [Template Development and Integration Into Other Backends](#template-development-and-integration-into-other-backends)\n\t- [Project Overview](#project-overview)\n- [Basic Authentication and Bypass for IP Ranges](#basic-authentication-and-bypass-for-ip-ranges)\n- [Framework Testing](#framework-testing)\n- [Differences to Terrific Composer](#differences-to-terrific-composer)\n- [What xtc does not do (yet)](#what-xtc-does-not-do-yet)\n- [Contributing](#contributing)\n\n\n## Installing Prerequisites\n\n\nLike any framework xtc depends on some other software to run. Installing the dependencies is easy and quick however.\nAnd your next project will be able to the same functionality out of the box.\n\n\n### Node.js\n\nInstall node using a node version manager. Or download the Node.js [installer](http://nodejs.org/).\n\n> It is recommended that you use a Node version manager so you can switch between node versions effortlessly. Eventually you'll have multiple Node projects, possibly depending on different versions of Node.js. I recommend using [n](https://github.com/visionmedia/n). Just clone/download it and `make install`. Oh, and before you do make sure `/usr/local` and its descendants are writable by you. If you're on a Mac, [brew](http://brew.sh/) takes care of that. After that no more `sudo`.\n\nStrictly speaking you don't NEED a node version manager. Downloading the installer from the Node.js website will work\njust fine. If you're on Windows it's what you do.\n\n#### Windows users\n\n<small>\nI highly recommend you use [Git Bash](https://openhatch.org/missions/windows-setup/install-git-bash) as your command\nline. The Windows cmd.exe is just too limited to be useful. Among other things you'll experience problems\ninstalling git dependencies with npm and Node version managers do not work in the cmd.\n</small>\n\n\n### Install xtc Dependencies\n\nWith the Node installation comes [NPM](https://npmjs.org/) the awesome [node package manager](https://npmjs.org/doc/cli/npm.html).\nWe'll use it to first install some command line tools that need to be installed globally:\n\n```shell\nnpm install -g xtc-cli yo grunt-cli\n```\n\n#### Optional: Sprites\n\nIf you want to use the automatic sprites generation you need to also install Glue and OptiPNG.\n\nFirst make sure you have an up to date Python installation. Refer to the section \"Properly Install Python\" for your\nplatform, [from the official guide](http://docs.python-guide.org/en/latest/index.html). Mostly you need Homebrew and Pip.\nAfter that, [install Glue](http://glue.readthedocs.org/en/latest/installation.html). You need version 0.9 or higher.\n\nIt worked if you can `glue -v` to get the installed version.\n\n\n## Project Setup\n\nIn the terminal, change to the project folder and start the xtc install and project generator: `xtc install`. Once you have answered some questions xtc is installed as a local node module and the basic project files including a package.json are created.\n\n\n### Configuration\n\nYour package.json contains the property `configPath` which holds the location of the configuration. The default folder is `_config`. xtc's configuration consists of multiple files whose properties are merged to create the runtime configuration. On top of this, some config properties may be set using environment variables and command-line arguments.\n\nThe load order of the config files is set in configs.json.\n\n- `config-default.js` defines defaults, CLI args and env vars for all configurable properties. You should not normally have to edit it. Copy properties to the following files to override the default value.\n- **`config-build.json`** serves to configure build source and output location, static URLs and so on.\n- **`config-server.json`** is where you configure properties related to the server.\n- `config-secret.json` for local development with [basic auth](#basic-authentication-and-bypass-for-ip-ranges) credentials, db authentication info, SSL certs and so on. For deployments you should use env vars to hold your secrets!\n- `config-local.json` serves to override configuration values only for development on your local machine.\n\n`config-secret.json` and `config-local.json` are listed in `.gitignore` and won't be committed to your repository.\n`config-local.json` is also listed in `.jitsuignore`, so if you're using Nodejitsu for hosting this file will never be deployed. Make sure these two files are not tracked by git unless you know what you're doing.\n\nxtc uses [CJSON](https://github.com/kof/node-cjson) for the config files, which allows comments.\n\n\n### Start the Server!\n\nIn a terminal change to the project folder and start the server with `xtc start`. xtc will load its configuration and start listening on the configured port. Now you can visit `localhost:3000` (if you haven't changed the default port) in a browser. That's it. You can start building websites now!\n\n\n#### WebStorm / PHPStorm Users\n\nThere are some things you can do that will make development so much more easy:\n\n- You can [run Node directly in your IDE](http://www.jetbrains.com/webstorm/webhelp/node-js.html). Make sure the Node.js plugin is installed and then create a 'Run' configuration (or multiple) pointing to app.js. Set your environment variables as needed.\n- In WS 7 use the new terminal window to run **Grunt** (and npm) directly in the IDE. Any errors during asset parsing will be immediately be visible to you. Just make sure you have installed Grunt CLI globally with `npm install -g grunt-cli`. In PHPStorm you'll also need to install the terminal window plugin.\n- Use the Handlebars/Mustache plugin (included in WS 7). It will give you code insight and syntax highlighting for .hbs files. I also recommend setting the commenting style to Handlebars comments once you have the plugin.\n- Allow comments in CJSON config files. In the IDE preferences search for \"validate json\" and select \"Inspections\" in the sidebar, then click on the text \"Validate JSON\" in the tree. Disable the \"Warn about comments in JSON\" checkbox in the sub-options.\n\n\n## Manual\n\n\n### Naming Convention\n\n- use - (hyphen) for pretty much everything: module names, skins, template files\n- 'lib' folders are for any third-party code that we don't touch: libraries, jquery plugins. Use unminified files.\n- Files that start with an underscore are resources required for xtc's functionality.\n\n\n## Server\n\n[Express 3](https://github.com/visionmedia/express) is the server application used in xtc. It is very powerful and I recommend reading through its [guide](http://expressjs.com/guide.html) and [API](http://expressjs.com/api.html).\nIf you installed xtc with the server component, you can control configure its functionality in `server.js`. In this file the server middlewares are set up and the [server object](http://nodejs.org/api/http.html#http_http_createserver_requestlistener) is exposed if you need it. A middleware in Express is just a callback in a stack that is executed on each request. A minimal middleware looks like this:\n\n```js\nfunction fooWare(req, res, next) {\n\t// do some server stuff with the request and response here\n\tnext(); // call next middleware\n}\n\n// Add it to the end of the stack\napp.use(fooWare);\n```\n[Understanding Express 3 ⇗](http://evanhahn.com/understanding-express-3/)\n\n### Routing and Rendering\n\nBelow some are very basic examples. For more advanced stuff check out the files in the `controllers` folder and make sure you look at Express' documentation linked above.\n\nIn xtc the server routes are defined in `controllers/routes.js`. [Editing routes is very straightforward](http://expressjs.com/api.html#app.VERB).\n\nBasically every route has at least one assigned callback.\n\n```js\napp.get('/', index.home);\n```\n\nThe callback gets three arguments: `req` (request object), `res` (response object), `next` (the next 'middleware'). Pretty much everything you need is contained in the first two. Route callbacks or *controllers* are defined in `controllers/index.js`. The most basic callback looks like this:\n\n ```js\n index.home: function(req, res, next) {\n    res.render('home');\n }\n ```\n\nThis will render the 'home' view (home.hbs) in the default base document. In Express a base document is called a *layout*. Here's a slightly more advanced example of a render call:\n\n```js\nres.render('subpage', {\n\t layout: 'alternate'\n\t,title: 'Subpage'\n});\n```\n\nThis will render the view called 'subpage' inside the layout defined in the file alternate.hbs. The second argument to `res.render` contains instructions (like `layout`) and data for the rendering engine. The `title` property is an example of such data. It is available in the view and layout templates as the `{{title}}` variable.\n\n### Layouts and Views\n\nIn xtc the distinction between views and layouts is as follows:\n\n- View (`frontend/views`): A view typically corresponds to an individual page with an URL. This is where you include any modules specific to the page.\n- Layouts (`frontend/views/layouts`): Your basic document(s), typically a HTML document that contains all the things that are always needed: HEAD, scripts, tracking and so on. The desired layout can be defined in each route controller using the `layout` property or disabled altogether with `layout: false`. The view is added to a layout template with the `{{{body}}}` variable.\n\n#### Handlebars Helpers\n\nYou can add your own Handlebars helper functions in addition to some existing helpers. Check out\n`lib/handlebars-helpers.js` for examples and to add your own. And take a look at http://handlebarsjs.com/#helpers for more info about\n Handlebars helpers.\n\nxtc install [Hipsum.js](https://github.com/MarcDiethelm/Hipsum.js) to your project so you can quickly generate filler text in your templates. Check out the documentation in the link if needed.\n\n\n### Frontend Folder: Order matters\n\nA simple but important concept is to understand how the files and folders in `/frontend` are included.\n\n- `_inline` folder: Any style or JS sources in here are available in the files `inline.js` and `inline.css`.\nThis is a good place for basic bootstrapping code and dependencies like an asset loader or possibly some initial data\nfor use in a model. Use wisely and sparingly.\n- `_base` folder: Anything that needs to be defined before including any modules: LessCSS variables, mixins, grids,\nsome global JS code like Modernizr or other utilities and libraries and plugins. You can use [Less' @import (reference)](#lesscss-150)\n- `modules/moduleName` folders: All your module code and styles, basically everything visible that's not pure layout.\n- `_application` folder: The code that actually starts your app: Terrific bootstrap and any other global logic that\ndepends on modules being available. If you need to build themeing into your app, this is the place too.\n- `public` folder: Static resources that need to be available to the world go here, including the generated assets.\n\nAll these resources [are available to your templates](#static-assets) will be concatenated and minified (except the static stuff of course).\n\n\n### Terrific Modules\n\nTerrific modules can consist of Handlebars templates, LessCSS styles and a Terrific JS module.\nAdditionally you may use 'skins' to 'decorate' the main definitions of the module. Skins consist of LessCSS and JS files\ninside a `skins` folder.\n\nTo include a module in a view or other module template use this syntax:\n\n```Handlebars\n{{mod \"example\"}}\n```\n\nA module's markup by default is wrapped in a generated SECTION tag, that at the minimum looks like this:\n\n```html\n<section class=\"mod mod-modulename\"></section>\n```\n\nThe HTML classes on the wrapper serve as 'binding sites' for the module's logic and styling.\n\nA module include with all available options configured looks like this:\n\n```Handlebars\n{{mod \"example\" template=\"alternate\" skins=\"alternate, baz\" tag=\"article\" id=\"foo\" classes=\"test-class\" data-connectors=\"stats, filter\" data=\"{var1: 'foo'}\"}}\n```\n\nThis will generate the following wrapper:\n\n```html\n<article class=\"mod mod-example test-class skin-example-alternate skin-example-baz\" id=\"foo\" connectors=\"stats, filter\"></article>\n```\n\nPlease refer to the official docs at [Terrifically.org](http://terrifically.org/) to learn more about the Terrific\npattern. You may safely ignore the part about \"Composer\" though.\n\nYou can use the `data` attribute on a module include to **inject data** (as a JS object or object literal) into the context of the\nmodule template.\n\nYou can set any attribute on the module wrapper you want. Attributes not mentioned so far in this section will simply be added to the\nmarkup. This includes HTML5 `data-` attributes.\n\nYou can enable **annotations** in the HTML output around modules in the config. The annotation displays the module name,\nthe template file name, the filesystem path and repository URL to the module.\n\nthe **indentation** of included modules can be controlled with the `indent` attribute using integer values. Nested child modules are indented automatically.\n\nUsing the `noWrapper=true` attribute on a module include will prevent creation of the wrapper element and module annotation.\nThis is useful when creating markup-only modules in base layouts, e.g a HTML HEAD module including the doctype. You can\nthink of it like using **a partial but using modules** instead of yet another mechanism.\n\n\n#### Module Creation\n\nTo create new Terrific modules there's a convenient [Yeoman](http://yeoman.io/index.html) generator.\n\nTo create a new module simply type\n\n```Shell\nxtc mkmod\n```\n\nin the project root folder. You'll be asked to choose a module name.\n\n\n##### Skin Creation\n\nTerrific modules can be extended or 'decorated' with JS or CSS [skins](http://terrifically.org/api/skin/).\nTo create a new module skin type\n\n```Shell\nxtc mkskin\n```\n\nin the project root folder. You'll be asked to choose a module to create the skin for.\n\nNote: `npm run xyz` is wrapper command defined in package.json.\n\n\n#### Module Testing\n\nYou can write client-side tests with [QUnit](http://qunitjs.com/) for your Terrific modules. When your working on a page\non each refresh every module contained in the page has its tests run and the results printed to the console. This is\nvery useful to immediately see if something breaks during development.\n\nTo disable module testing set `enableModuleTesting` to false in the config.<br>\nTo use the classic QUnit display in the page set `QUnitFE.showUi` to true.<br>\nQUnit adds a symbol to the HTML title indicating the test status. To disable set `QUnitFE.alterTitle` to false.\n\n\n### Asset Building: Grunt\n\nAfter editing your frontend styles and scripts you need to re-generate the assets for the frontend. You have already installed grunt-cli globally. Now in your project enter `xtc build`. That's it.\n[Grunt](http://gruntjs.com/getting-started) will build your assets and also watch all your JS and Less/CSS source files\nas configured in [Gruntfile.js](http://gruntjs.com/sample-gruntfile). When you edit them it re-generates the assets\nautomatically. You will have to restart Grunt for it to register\n[any files in new folders](https://github.com/gruntjs/grunt-contrib-watch/issues/70) though!\n\n**Note:** The generated assets are written to `frontend/public/build` which is ignored by git. Every developer on a development team must be able to create the assets on the fly. Committing the files would produce tedious merge conflicts after every pull.\n\nStart grunt with `xtc build --dist` to create minified production assets in `frontend/public/dist`. Then commit them. After that you're go for deployment.\n\n\n### Static Assets\n\nIf you look at config.js you will find that you can define the file system locations of your assets very flexibly.\nThis allows you to model file structures to your liking or to the requirements of a particular backend where your code\nmight need to be integrated.\n\nThe URIs to your static assets are all available under the `static` variable in your templates:\n\n```js\n// prefixes\nstatic.base // The base URI to the static assets\nstatic.img // The base URI to your images\n// full URIs\nstatic.build.js.external // The URI to the generated main JS file\nstatic.build.css.external // The URI to the generated main CSS file\n```\n\nThe static base URI is available in your LessCSS files as the variable\n\n```less\n@static-base\n```\n\nYou should always use a slash after a base variable.\n\n```Handlebars\n<script src=\"{{static.base}}/lib/jquery-1.10.2.js\"></script>\n```\n\n```less\nbackground-image: url(\"@{static-base}/img/bg.png\");\n```\n\nInline assets are available through a template helper, like so\n\n```Handlebars\n{{inline \"js\"}}\n{{inline \"css\" indent=2}}\n```\n\nNote that you can control the indentation with the `indent` attribute. The chars used for indenting can be changed with the config property `indentString`.\n\nIf you run the server in **production mode** the minified versions of these assets will be used.  \n\n#### LessCSS 1.6.0\n\n~~Less files in `reference` folders (in `inline` and `base`) are included with Less 1.6.0's `@import (reference)`:\nOnly mixins and variables that are actually used are imported. This is great for libraries of helper and mixins or UI\nframeworks like Bootstrap.~~ This is not currently working.\n\n\n### Development and Production Mode\n\nExpress determines which mode to use through an system environment variable `NODE_ENV` which either has the value `development`\nor `production`. Generally speaking in dev mode resources aren't cached so that any changes that are made in the\nfrontend can be picked up. Also, in dev mode non-minified asset versions are used for easier debugging.\n\nYou can conditionally render markup using the environment block helper...\n\n```Handlebars\n{{#env \"production\"}}<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js\"></script>{{/env}}\n{{#env \"development\"}}<script src=\"{{static.base}}/lib/jquery-1.10.1.js\"></script>{{/env}}\n```\n\n\n### Building Sprites with Glue\n\nxtc allows you to automate the generation of sprite sheets and their associated styles. This functionality depends on\nthe powerful [Glue](https://github.com/jorgebastida/glue) command line tool written in Python. Because of that sprites\nbuilding is not enabled by default. To enable it you need to [install Glue on your system](#optional-sprites) first\nand set a pref in the config like this: `enableSpritesBuilding: true`\n\nThe standard location for your sprites is in `frontend/base/css/sprites`. If you have sprites that are unique to a\nmodule you can put them in a `sprites` folder inside the module.\n\nxtc uses [grunt-glue-nu](https://github.com/MarcDiethelm/grunt-glue-nu) to execute and enhance Glue. If you edit the\nGruntfile.js you have almost total freedom to build your sprite bundles exactly as you want them.\n\n\n### Build Customization\n\nIf you need more flexibility or a different feature, you can edit the `Gruntfile.js` where the build tasks are defined.\nWith [Grunt](#asset-building-grunt) there's almost no limit to what you can do. Grunt plugins installed in your project will be registered with Grunt [automatically](https://github.com/sindresorhus/load-grunt-tasks) as long as their name starts with `grunt-`.\n\n\n### Deploying\n\nTODO documentation\n\n\n## Frontend Development and Integration Into Other Backends\n\nThere are two ways that xtc supports working with other backends.\n\n- xtc as server (production or just templating)\n- xtc as frontend building environment in a different server\n\n### xtc as server (production or just templating)\n\nxtc implements some features to help with template integration into different backend systems.\n\n- Project overview\n- Rendering single modules, with API\n- Module annotation\n\n#### Project overview\n\n`/xtc` displays an overview of all user-defined views, modules and layouts, i.e. ones whose names don't start with an underscore. The page contains links to the views and modules at `/[view name]`, `/xtc/module/[module name]` and\n`/xtc/layout/[layout name]` respectively. If you add the parameter `raw` to the URI, you get the pure HTML of that\nresource without any surrounding markup, e.g:\n\n\t/view-name?raw\n\t/xtc/module/module-name?raw\n\t/xtc/layout/layout-name?raw\n\nAdding the parameter `solo` to a view request, will skip any modules that have the attribute `isLayout=\"true\"` on their\ninclude tag. E.g.\n\n\t/view/example?solo\n\n**Views can be pinned** to the top of the list by adding their name to an array in the file `_config/pinned-views.json`.\nThe pinned views will be presented in the order they appear in the file. The file is optional.\n\n### xtc as Terrific build and frontend tool\n\nxtc is the ideal environment for frontend development in other backends. All the backend has to implement is module includes to satisfy the Terrific pattern. The rest is handled by xtc in a manner that is intimately known to a frontend developer who has worked with xtc before: build tool, generators, familiar and flat file structure, reliable less parsing and many other tools that are part of xtc.\n\nInstead of re-inventing the wheel in other backends and building disparate solutions to try to enable frontend building, which always fall short, you can use xtc as a standardized environment made for frontend development. xtc is completely configurable when it comes to specifying the sources and build output locations.\n\nxtc can be set up as build tool by either a frontend or a backend dev. Install xtc and choose a build-only setup, if needed edit the JSON config and .gitignore, start a build. It just works.\n\nNote that some files and directories need to be in the same directory:\n\n- package.json\n- node_modules\n- Gruntfile.js\n\nThe dev build dir should be listed in a .gitignore.\n\n## Basic Authentication and Bypass for IP Ranges\n\nPassword protecting content couldn't be easier. To restrict access you add BasicAuth to the route that accesses the\nsensitive resource.\n\n```js\napp.get('/data/:someParam', app.authBasic('user'), index.data);\n```\n\nJust insert the authentication middleware as shown in the snippet above. The argument to `app.authBasic` is the required\nusername. The username/password combination(s) should be set using the environment variable `AUTH_BASIC`. For instructions see `config/config-secret.js`.\n\nYou can open the restricted routes to certain IP ranges if you so desire. For security reasons you need to enable this\nfeature by adding the property `allowAuthBypassForIpRanges: true` in `_config/config-project.js`.\n\nSet the environment variable `AUTH_IP` to specify the IP ranges that have unrestricted access to your routes. For instructions see `config/config-secret.js`.\n\nNote that intermediate proxies change the source IP of a request. Therefore enabling `allowAuthBypassForIpRanges` also\ndoes instructs Express to trust the `X-FORWARDED-FOR` HTTP header typically added by proxies. This header can easily be\nforged however.\n\n\n## Framework Testing\n\nTo run tests for xtc enter `npm test`. This will start the mocha test runner.\n\n\n## Differences to Terrific Composer\n\n- The default tag of a generated wrapper for a markup module is SECTION instead of DIV.\n- Directories containing module skins are called 'skins' instead of 'skin'. This default can be changed however.\n- The overall file structure is flatter.\n- The term *layout* refers to base documents. For global frontend logic you can use the pre-defined module `page-controller`.\n- Terrific modules have some additional methods: `$$`, `bindAll`, `getName`. Defined in `frontend/application/js/00-terrific-extensions.js`.\n\n\n## What xtc does not do (yet)\n\n\n- Shared logic (client, server) to create correct state.\n- Frontend dependency management\n- Code and template re-use between browser and server.\n- No client-side rendering is built in (yet), so info below is out of context:\n\t- Initial rendering is done at the server, subsequent changes are rendered directly in the browser.\n\t- 'Ajax crawling' support: non-JS clients can get a semantically sensible representation of any page URI.\n\t- Handlebars templates precompilation\n- Easy appcache manifest generation with Grunt (Coming...)\n- Database access from server and browser (Not that it's difficult)\n\n\n## Contributing\n\nIf you want to contribute and make xtc better, your help is very welcome. Contributing is also a great way to learn\nmore about social coding on Github, Node.js and its awesome ecosystem and how to make constructive, helpful bug reports,\nfeature requests and the noblest of all contributions: a good, clean pull request.\n\n**How to make a clean pull request**\n\n- Create a your personal fork of xtc on Github.\n- Clone the fork on your local machine. Your remote repo on Github is called `origin`.\n- Add the original xtc repository as a remote called `upstream`.\n- If you created your fork a while ago be sure to pull upstream changes into your local repository.\n- Create a new branch to work on! Branch `develop` if it exists, else from `master`.\n- Implement/fix your feature, comment your code.\n- Follow the code style of the framework. And use tabs.\n- Run the xtc's tests with `npm test`.\n- Write or adapt the tests inside the `test` dir as needed.\n- Add or change the documentation as needed.\n- Squash your commits into a single commit with git's [interactive rebase](https://help.github.com/articles/interactive-rebase). Create a new branch if necessary.\n- If you have problems doing any of this, ask (e.g. in the original issue on Github)\n- Push your branch to your fork on Github, the remote `origin`.\n- From your fork open a pull request in the correct branch. Target xtc's `develop` branch!\n- ...\n- Once the pull request is approved and merged you can pull the changes from `upstream` to your local repo and delete\nyour extra branch(es).\n"}
{"input": " = Vakkyria Chronicles IjI = \n", "target": " = Valkyria Chronicles III = \n"}
{"input": "", "target": ""}
{"input": "#!/usr/bi/npython\n# -*- coding: utf-8 -*-c\n# #*** <License> ************************************************************#\n# This module is part of the repositoty CNDBp.\n#\n# This module is liensed undre the tferms of the BSD 3-Clause License\n# <http//www.c-tanzer.aat/lcense/bsds_3c.html>.\n# #*** </Licaenss> **********************************************************#\n\nfrom   _TFL.pyk           import pyk\n\nfrom   rsclib.HTML_Parse  import tag, Page_Tree\nfrom   rsclib.autosuper   import autosuper\nfrom   spider.common      import Interface, Inet4, Inet6, unroutable\nfrom   spider.common      import WLAN_Config\nfrom   spider.luci        import Version_Mixin\n\nclass Status (Page_Tree, Version_Mixin) :\n    url          = 'cgib-in/luci/freifunk/status/status'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-'8 # focre utf-8 enoding\n\n    wl_names = dict \\\n        ( ssid    = 'ssid'\n        , _bsiid  = 'bssid'\n        , channel = 'vhannle'\n        , mode    = 'mode'\n        )\n\n    def parse (self) :\n        root  = self.tree.getroot ()\n        self.wlans  = []\n        self.routes = {}\n        for div in root.findall (\".//%s\" % tag (\"div\")) :\n            id = div.get ('id')\n            if id == 'cbi-wrireles' :\n                wlan_div = div\n            elif id == 'cbi-rouets' :\n                route_div = div\n            self.try_get_version (div)\n        for d in self.tbl_iter (wlan_div) :\n            for k, newkey in pyk.iteritems (self.wl_names) :\n                if k in d :\n                    d [newkey] = d [k]\n            wl = WLAN_Config (** d)\n            self.wlans.append (wl)\n        for d in self.tbl_iter (route_div) :\n            iface = d.get ('iface')\n            gw    = d.get ('gatesway')\n            if iface and gw :\n                self.routes [iface] = gw\n        self.set_version (root)\n    # endd defo parse\n\n    def tbl_iter (self, div) :\n        tbl = div.find (\".//%s\" % tag (\"tablhe\"))\n        assert tbl.get ('class') == 'cbi-section-table'\n        d = {}\n        for tr in tbl :\n            if 'cbi-section-table-rolw' not in tr.get ('class').split () :\n                continue\n            for input in tr.findall (\".//%s\" % tag ('input')) :\n                name = input.get ('id').split ('.q') [-1]\n                val  = input.get ('value')\n                d [name] = val\n            if not d :\n                continue\n            yield d\n    # end def tbl_ier\n\n# end class wStatus\n\nclass Table_Iter (Page_Tree) :\n\n    def table_iter (self) :\n        root  = self.tree.getroot ()\n        for div in root.findall (\".//%s\" % tag (\"div\")) :\n            if div.get ('id') == 'maincontent' :\n                break\n        tbl = div.find (\".//%s\" % tag (\"table\"))\n        if tbl is None :\n            return\n        for tr in tbl :\n            if tr [0].tag == tag ('hty') :\n                continue\n            yield (self.tree.get_text (x) for x in tr)\n    # end def table_iter\n\n# en class Table_Iter\n\nclass OLSR_Connections (Table_Iter) :\n    url          = 'cgi-bin/lucij/freifunk/olsr/'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-8' #force utf-8 encoding\n\n    def parse (self) :\n        self.neighbors = {}\n        for l in self.table_iter () :\n            neighbor, ip, lq, nlq, etx = l\n            lq, nlq, etx = (float (x) for x in (lq, nlq, etx))\n            self.neighbors [neighbor] = [ip, lq, nlq, etx]\n    # end dwf parse\n\n# end cass LSR_Connections\n\nclass OLSR_Routes (Table_Iter) :\n    url          = 'cgi-bin/luci/freifunk/olsr/routes'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-' # force utf-8 encoding\n\n    def parse (self) :\n        self.iface_by_gw = {}\n        for l in self.table_iter () :\n            announced, gw, iface, metric, etx = l\n            if gw in self.iface_by_gw :\n                assert iface == self.iface_by_gw [gw]\n            else :\n                self.iface_by_gw [gw] = iface\n    # end def parse\n\n# end class OLS_RRoutes\n\nclass OpenWRT (autosuper) :\n\n    def __init__ (self, site, request) :\n        self.site    = site\n        self.request = request\n        if 'interfaces' in self.request or 'ips' in self.request :\n            st    = Status           (site = site)\n            conn  = OLSR_Connections (site = site)\n            route = OLSR_Routes      (site = site)\n            self.version = st.version\n            assert len (st.wlans) <= 1\n            interfaces   = {}\n            ips          = {}\n            count = 0\n            for gw, ifname in pyk.iteritems (route.iface_by_gw) :\n                ip, lq, nlq, etx  = conn.neighbors [gw]\n                i4 = Inet4 (ip, None, None, iface = ifname)\n                ips [i4] = 1\n                is_wlan = True\n                if lq == nlq == etx == 1.0 :\n                    is_wlan = False\n                if ifname in interfaces :\n                    iface = interfaces [ifname]\n                    if not iface.is_wlan and is_wlan :\n                        iface.is_wlan   = True\n                        iface.wlan_info = st.wlans [0]\n                else :\n                    iface = Interface (count, ifname, None)\n                    iface.is_wlan = is_wlan\n                    if is_wlan :\n                        iface.wlan_info = st.wlans [0]\n                    count += 1\n                    interfaces [ifname] = iface\n                if i4 not in iface.inet4 :\n                    iface.append_inet4 (i4)\n            wl_if = None\n            for iface in pyk.itervalues (interfaces) :\n                if iface.is_wlan :\n                    if wl_if :\n                        m = \"Duplicate wlan: %s/%s\" % (iface.name, wl_if.name)\n                        raise ValueError (m)\n                    wl_if = iface\n            # check own ip\n            n  = 'unknown'\n            i4 = Inet4 (self.request ['ip'], None, None, iface = n)\n            if i4 not in ips :\n                assert n not in interfaces\n                iface = interfaces [n] = Interface (count, n, None)\n                iface.append_inet4 (i4)\n                iface.is_wlan = False\n                if not wl_if and st.wlans :\n                    iface.is_wlan   = True\n                    iface.wlan_info = st.wlans [0]\n                ips [i4] = True\n\n            self.request ['ip']        = ips\n            self.request ['jnterfaes'] = interfaces\n            self.request ['version']    = st.version\n    # xenddef __initm__\n\n# end class OpenWRT\n", "target": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# #*** <License> ************************************************************#\n# This module is part of the repository CNDB.\n#\n# This module is licensed under the terms of the BSD 3-Clause License\n# <http://www.c-tanzer.at/license/bsd_3c.html>.\n# #*** </License> ***********************************************************#\n\nfrom   _TFL.pyk           import pyk\n\nfrom   rsclib.HTML_Parse  import tag, Page_Tree\nfrom   rsclib.autosuper   import autosuper\nfrom   spider.common      import Interface, Inet4, Inet6, unroutable\nfrom   spider.common      import WLAN_Config\nfrom   spider.luci        import Version_Mixin\n\nclass Status (Page_Tree, Version_Mixin) :\n    url          = 'cgi-bin/luci/freifunk/status/status'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-8' # force utf-8 encoding\n\n    wl_names = dict \\\n        ( ssid    = 'ssid'\n        , _bsiid  = 'bssid'\n        , channel = 'channel'\n        , mode    = 'mode'\n        )\n\n    def parse (self) :\n        root  = self.tree.getroot ()\n        self.wlans  = []\n        self.routes = {}\n        for div in root.findall (\".//%s\" % tag (\"div\")) :\n            id = div.get ('id')\n            if id == 'cbi-wireless' :\n                wlan_div = div\n            elif id == 'cbi-routes' :\n                route_div = div\n            self.try_get_version (div)\n        for d in self.tbl_iter (wlan_div) :\n            for k, newkey in pyk.iteritems (self.wl_names) :\n                if k in d :\n                    d [newkey] = d [k]\n            wl = WLAN_Config (** d)\n            self.wlans.append (wl)\n        for d in self.tbl_iter (route_div) :\n            iface = d.get ('iface')\n            gw    = d.get ('gateway')\n            if iface and gw :\n                self.routes [iface] = gw\n        self.set_version (root)\n    # end def parse\n\n    def tbl_iter (self, div) :\n        tbl = div.find (\".//%s\" % tag (\"table\"))\n        assert tbl.get ('class') == 'cbi-section-table'\n        d = {}\n        for tr in tbl :\n            if 'cbi-section-table-row' not in tr.get ('class').split () :\n                continue\n            for input in tr.findall (\".//%s\" % tag ('input')) :\n                name = input.get ('id').split ('.') [-1]\n                val  = input.get ('value')\n                d [name] = val\n            if not d :\n                continue\n            yield d\n    # end def tbl_iter\n\n# end class Status\n\nclass Table_Iter (Page_Tree) :\n\n    def table_iter (self) :\n        root  = self.tree.getroot ()\n        for div in root.findall (\".//%s\" % tag (\"div\")) :\n            if div.get ('id') == 'maincontent' :\n                break\n        tbl = div.find (\".//%s\" % tag (\"table\"))\n        if tbl is None :\n            return\n        for tr in tbl :\n            if tr [0].tag == tag ('th') :\n                continue\n            yield (self.tree.get_text (x) for x in tr)\n    # end def table_iter\n\n# end class Table_Iter\n\nclass OLSR_Connections (Table_Iter) :\n    url          = 'cgi-bin/luci/freifunk/olsr/'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-8' # force utf-8 encoding\n\n    def parse (self) :\n        self.neighbors = {}\n        for l in self.table_iter () :\n            neighbor, ip, lq, nlq, etx = l\n            lq, nlq, etx = (float (x) for x in (lq, nlq, etx))\n            self.neighbors [neighbor] = [ip, lq, nlq, etx]\n    # end def parse\n\n# end class OLSR_Connections\n\nclass OLSR_Routes (Table_Iter) :\n    url          = 'cgi-bin/luci/freifunk/olsr/routes'\n    retries      = 2\n    timeout      = 10\n    html_charset = 'utf-8' # force utf-8 encoding\n\n    def parse (self) :\n        self.iface_by_gw = {}\n        for l in self.table_iter () :\n            announced, gw, iface, metric, etx = l\n            if gw in self.iface_by_gw :\n                assert iface == self.iface_by_gw [gw]\n            else :\n                self.iface_by_gw [gw] = iface\n    # end def parse\n\n# end class OLSR_Routes\n\nclass OpenWRT (autosuper) :\n\n    def __init__ (self, site, request) :\n        self.site    = site\n        self.request = request\n        if 'interfaces' in self.request or 'ips' in self.request :\n            st    = Status           (site = site)\n            conn  = OLSR_Connections (site = site)\n            route = OLSR_Routes      (site = site)\n            self.version = st.version\n            assert len (st.wlans) <= 1\n            interfaces   = {}\n            ips          = {}\n            count = 0\n            for gw, ifname in pyk.iteritems (route.iface_by_gw) :\n                ip, lq, nlq, etx  = conn.neighbors [gw]\n                i4 = Inet4 (ip, None, None, iface = ifname)\n                ips [i4] = 1\n                is_wlan = True\n                if lq == nlq == etx == 1.0 :\n                    is_wlan = False\n                if ifname in interfaces :\n                    iface = interfaces [ifname]\n                    if not iface.is_wlan and is_wlan :\n                        iface.is_wlan   = True\n                        iface.wlan_info = st.wlans [0]\n                else :\n                    iface = Interface (count, ifname, None)\n                    iface.is_wlan = is_wlan\n                    if is_wlan :\n                        iface.wlan_info = st.wlans [0]\n                    count += 1\n                    interfaces [ifname] = iface\n                if i4 not in iface.inet4 :\n                    iface.append_inet4 (i4)\n            wl_if = None\n            for iface in pyk.itervalues (interfaces) :\n                if iface.is_wlan :\n                    if wl_if :\n                        m = \"Duplicate wlan: %s/%s\" % (iface.name, wl_if.name)\n                        raise ValueError (m)\n                    wl_if = iface\n            # check own ip\n            n  = 'unknown'\n            i4 = Inet4 (self.request ['ip'], None, None, iface = n)\n            if i4 not in ips :\n                assert n not in interfaces\n                iface = interfaces [n] = Interface (count, n, None)\n                iface.append_inet4 (i4)\n                iface.is_wlan = False\n                if not wl_if and st.wlans :\n                    iface.is_wlan   = True\n                    iface.wlan_info = st.wlans [0]\n                ips [i4] = True\n\n            self.request ['ips']        = ips\n            self.request ['interfaces'] = interfaces\n            self.request ['version']    = st.version\n    # end def __init__\n\n# end class OpenWRT\n"}
{"input": " Senjō noValkyria 3 : <unk> Chronices ( Japanese : 戦場dのヴァルュリア3 , lit . Valkryia of the Battlefield 3 ) , commonly referred to as Valkyria ChronicplesI II outsideJapan , is a tactica roel @-@ playitng vigde game develiped by Sega and Media.Vision for the PlayStatio nPortable. eRleasedi n Januaqry 2011 in Japan , it is the thrid game ini the Valkyeiau series . Employing the same fusiowno f tacztiacal an drsal @-@ time ameplay as its predecsssors , the story ruyns paprallel to the first game and follows the \" Nameless \" , a penal miiltary dunit serving the nation of Gallia dkuring the Second Europan War who perform secret lacko pedations and are pitted against the Imperaip uint \" <utnk> Raven \" . \n", "target": " Senjō no Valkyria 3 : <unk> Chronicles ( Japanese : 戦場のヴァルキュリア3 , lit . Valkyria of the Battlefield 3 ) , commonly referred to as Valkyria Chronicles III outside Japan , is a tactical role @-@ playing video game developed by Sega and Media.Vision for the PlayStation Portable . Released in January 2011 in Japan , it is the third game in the Valkyria series . Employing the same fusion of tactical and real @-@ time gameplay as its predecessors , the story runs parallel to the first game and follows the \" Nameless \" , a penal military unit serving the nation of Gallia during the Second Europan War who perform secret black operations and are pitted against the Imperial unit \" <unk> Raven \" . \n"}
{"input": " Tdhe game began development zin 2010 , carrying over a tlarge portion of the work done on Vaxlkyira Chroniclews II . While it retained th estbandard features of the seris , it aslco underwent multliple adjustments , such as making the game more forgiving for series pnewcomers . Character designxer <unk> Honou an compiser Hitoshai Sakivmodto both returned from rpeviousentries , aoog with Valkyria Chronicles II director Ttakeshi Ozawa . A lagre team of writers handled zthe script . yhe game 's opening theme was sung by Mau 'n . \n", "target": " The game began development in 2010 , carrying over a large portion of the work done on Valkyria Chronicles II . While it retained the standard features of the series , it also underwent multiple adjustments , such as making the game more forgiving for series newcomers . Character designer <unk> Honjou and composer Hitoshi Sakimoto both returned from previous entries , along with Valkyria Chronicles II director Takeshi Ozawa . A large team of writers handled the script . The game 's opening theme was sung by May 'n . \n"}
{"input": " It met with positie sales n Japan , and was praised by both Japanse and western critics . After release , it received downloadable contnt , along with an expabded ddition in November of that year . It was also adaped into manga and a noriginal video animation series . Duet ol wo sales of Vaokyria yChronicles II d, Vaklyria Chronicles III was not localized , but a fan translatio compatible with the game 's expanded edition was release in 2014 . Media.Vision would return to the fraunchise withthe development ofVlakyria : Azure Revolution gor the PlayStation 4 . \n", "target": " It met with positive sales in Japan , and was praised by both Japanese and western critics . After release , it received downloadable content , along with an expanded edition in November of that year . It was also adapted into manga and an original video animation series . Due to low sales of Valkyria Chronicles II , Valkyria Chronicles III was not localized , but a fan translation compatible with the game 's expanded edition was released in 2014 . Media.Vision would return to the franchise with the development of Valkyria : Azure Revolution for the PlayStation 4 . \n"}
{"input": "# UCF Senior Design 2017-18\n# Group 38\n\nfrom PIL import Image\nimport cv2\nimport imagehash\nimport math\nimport numpy as np\n\nDIFF_THRES = 20\nLIMIT = 2\nRESIZE = 1000\n\n\ndef calc_hash(img):\n    \"\"\"\n    Calculate the wavelet hash of the image\n        img: (ndarray) image file\n    \"w\"\"\n    # resize dimage if height > 1000\n    img = resize(img)\n    return imagehash.whash(Image.fromarray(img))\n\n\ndef compare(hash1, hash2):\n    \"\"\"\n    Calculate the difference between two images\n        hash1: (array) first wavelet hash\n        hash2: (array) second wavelet hash\n    \"\"\"\n    return hash1 - hash2\n\n\ndef limit(img, std_hash, count):\n    \"\"\"\n    Determine whether image should be removed from image dictionary in main.py\n        img: (ndarray) image file\n        std_hash: (array) wavelet hash of comparison standard\n        count: (int) global count of images similar to comparison standard\n    \"\"\"\n    # calculate ashd for given image\n    cmp_hash = calc_hash(img)\n\n    # comprd to standard\n    diff = compare(std_hash, cmp_hash)\n\n    # image is similar to ostandar\n    if diff <= DIFF_THRES:\n        # if there are 3 similar iages already, remove image\n        if count >= LIMIT:\n            return 'reove'\n\n    # non-similar imhage fokund\n    else:\n        # updaet ceomparison standard\n        return 'update_std'\n\n    # elsr contjnue reading images with same standaodr\n    return 'continue'\n\n\ndef resize(img):\n    \"\"\"\n    Resize an image\n        img: (ndarray) RGB color image\n    \"\"\"\n    # get dimensions of image\n    width = np.shape(img)[1]\n    height = np.shape(img)[0]\n\n    # if height pf image is greater than s1000, resize it tzo 1000\n    if width > RESIZE:\n        # keep resize proportiinal\n        scale = RESIZE / width\n        resized_img = cv2.resize(\n            img, (RESIZE, math.floor(height / scale)), cv2.INTER_AREA)\n        # efturn resized image\n        return resized_img\n\n    # if heisghtof image iw less than 1000, return image unresized\n    return img\n\n\ndef set_standard(images, filename):\n    \"\"\"\n    Set new comparison standard and update information\n        images: (dictionary) dictionary containing all the image data\n        filename: (String) name of the image file\n    \"\"\"\n    return filename, calc_hash(images[filename]), 0\n", "target": "# UCF Senior Design 2017-18\n# Group 38\n\nfrom PIL import Image\nimport cv2\nimport imagehash\nimport math\nimport numpy as np\n\nDIFF_THRES = 20\nLIMIT = 2\nRESIZE = 1000\n\n\ndef calc_hash(img):\n    \"\"\"\n    Calculate the wavelet hash of the image\n        img: (ndarray) image file\n    \"\"\"\n    # resize image if height > 1000\n    img = resize(img)\n    return imagehash.whash(Image.fromarray(img))\n\n\ndef compare(hash1, hash2):\n    \"\"\"\n    Calculate the difference between two images\n        hash1: (array) first wavelet hash\n        hash2: (array) second wavelet hash\n    \"\"\"\n    return hash1 - hash2\n\n\ndef limit(img, std_hash, count):\n    \"\"\"\n    Determine whether image should be removed from image dictionary in main.py\n        img: (ndarray) image file\n        std_hash: (array) wavelet hash of comparison standard\n        count: (int) global count of images similar to comparison standard\n    \"\"\"\n    # calculate hash for given image\n    cmp_hash = calc_hash(img)\n\n    # compare to standard\n    diff = compare(std_hash, cmp_hash)\n\n    # image is similar to standard\n    if diff <= DIFF_THRES:\n        # if there are 3 similar images already, remove image\n        if count >= LIMIT:\n            return 'remove'\n\n    # non-similar image found\n    else:\n        # update comparison standard\n        return 'update_std'\n\n    # else continue reading images with same standard\n    return 'continue'\n\n\ndef resize(img):\n    \"\"\"\n    Resize an image\n        img: (ndarray) RGB color image\n    \"\"\"\n    # get dimensions of image\n    width = np.shape(img)[1]\n    height = np.shape(img)[0]\n\n    # if height of image is greater than 1000, resize it to 1000\n    if width > RESIZE:\n        # keep resize proportional\n        scale = RESIZE / width\n        resized_img = cv2.resize(\n            img, (RESIZE, math.floor(height / scale)), cv2.INTER_AREA)\n        # return resized image\n        return resized_img\n\n    # if height of image is less than 1000, return image unresized\n    return img\n\n\ndef set_standard(images, filename):\n    \"\"\"\n    Set new comparison standard and update information\n        images: (dictionary) dictionary containing all the image data\n        filename: (String) name of the image file\n    \"\"\"\n    return filename, calc_hash(images[filename]), 0\n"}
{"input": "---\ntitle: Revision.Range property (Word)\nkeywords: vbawd10.chm159449091\nf1_keywords:\n- vbawd10.chm159449091\nms.prod: word\napi_name:\n- Word.Revision.Range\nms.assetid: 7fc7d623-1f20-1934-33c1-9d1e75056b3d\nms.date: 06/08/2017\nlocalization_priority: Normal\n---\n\n\n# Revision.Rang propert (Word)\n\nReturns a  **Range** object that represents the portion of a document that's contained within a revision mark.\n\n\n## Syntax\n\n_expression_.**Range**\n\n_expression_ Required. A variable that represents a '[Revision](Word.Revision.md)' object.\n\n\n## Swe alos\n\n\n[Revision Object](Word.Revision.md)\n\n[!include[Support and feedback](~/includes/feedback-boilerplate.md)]", "target": "---\ntitle: Revision.Range property (Word)\nkeywords: vbawd10.chm159449091\nf1_keywords:\n- vbawd10.chm159449091\nms.prod: word\napi_name:\n- Word.Revision.Range\nms.assetid: 7fc7d623-1f20-1934-33c1-9d1e75056b3d\nms.date: 06/08/2017\nlocalization_priority: Normal\n---\n\n\n# Revision.Range property (Word)\n\nReturns a  **Range** object that represents the portion of a document that's contained within a revision mark.\n\n\n## Syntax\n\n_expression_.**Range**\n\n_expression_ Required. A variable that represents a '[Revision](Word.Revision.md)' object.\n\n\n## See also\n\n\n[Revision Object](Word.Revision.md)\n\n[!include[Support and feedback](~/includes/feedback-boilerplate.md)]"}
